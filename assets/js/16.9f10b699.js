(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{548:function(t,e,a){"use strict";a.r(e);var s=a(2),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java-集合与容器类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java-集合与容器类"}},[t._v("#")]),t._v(" Java 集合与容器类")]),t._v(" "),a("h2",{attrs:{id:"体系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#体系"}},[t._v("#")]),t._v(" 体系")]),t._v(" "),a("p",[t._v("早在 Java 2 中之前，Java 就提供了特设类。比如：Dictionary, Vector, Stack 和 Properties 这些类用来存储和操作对象组。虽然这些类都非常有用，但是它们缺少一个核心的，统一的主题。由于这个原因，使用 Vector 类的方式和使用 Properties 类的方式有着很大不同。为此，整个集合框架就围绕一组标准接口而设计。")]),t._v(" "),a("p",[t._v("集合框架被设计成要满足以下几个目标。")]),t._v(" "),a("ul",[a("li",[t._v("该框架必须是高性能的。基本集合（动态数组，链表，树，哈希表）的实现也必须是高效的。")]),t._v(" "),a("li",[t._v("该框架允许不同类型的集合，以类似的方式工作，具有高度的互操作性。")]),t._v(" "),a("li",[t._v("对一个集合的扩展和适应必须是简单的。")])]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("graph LR\n\tCollection接口--\x3eList接口\n\tMap接口--\x3eHashMap类\n\tCollection接口--\x3eSet接口\n\tList接口--\x3eArrayList类\n\tList接口--\x3eLinkedList类\n\tSet接口--\x3eHashSet类\n\tSet接口--\x3eSortedSet类\n\tMap接口--\x3eSortedMap类\n\tSortedMap类--\x3eTreeMap类\n\tHashSet类--\x3eLinkedHashSet类\n\tSortedSet类--\x3eTreeSet类\n\tIterator接口--\x3eListIterator接口\n\n")])])]),a("h2",{attrs:{id:"接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[t._v("#")]),t._v(" 接口")]),t._v(" "),a("h3",{attrs:{id:"collection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collection"}},[t._v("#")]),t._v(" Collection")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("最基本的集合接口，存储一组不唯一、无序的对象")])]),t._v(" "),a("li",[a("p",[t._v("公共方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("int size()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回元素个数")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean isEmpty()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否为空")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean contains(Object obj)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否包含 obj")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean add(E element)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("添加元素，返回成功与否")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("int hashCode()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回哈希码")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Object[] toArray()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("转换为 Object 数组")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean remove(Object obj)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("删除元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("void clear()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("清空容器")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Iterator"),a("E",[t._v(" iterator")])],1),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回迭代器")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean equals(Object o)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是否与 o 相等")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("void shuffle(List< ? > list)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("随机重排元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean containsAll(Collection< ? > c)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否包含 c 中所有元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean addAll(Contain< ? > c)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("集合并运算")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean removeAll(Collection< ? > c)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("集合差运算")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean retainAll(Collection< ? > c)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("集合交运算，只保留也被 c 包含的元素")])])])])])]),t._v(" "),a("h3",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("存储键值对，提供 key 到 value 的映射，key 唯一")])]),t._v(" "),a("li",[a("p",[t._v("公共方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("V put(K key,V value)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("插入键值对")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("void putAll(Map<? extends K,? extends V> m)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("复制映射")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean containsKey(Object key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否包含 key")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean containsValue(Object value)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否包含 value")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("V get(Object key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回键对应值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Set"),a("K",[t._v(" keySet()")])],1),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回键的集合")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Collection"),a("V",[t._v(" values()")])],1),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回值的集合")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("V remove(Object key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("删除 key 对应条目")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Set<Map.Entry<K,V>> entrySet()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回键值对的集合")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("使用 keySet() 抽取 key 序列，将 map 中的所有 key 生成一个 Set。")]),t._v(" "),a("p",[t._v("使用 values() 抽取 value 序列，将 map 中的所有 values 生成一个 Collection。")]),t._v(" "),a("p",[t._v("为什么一个生成 Set，一个生成 Collection？那是因为，key 总是独一无二的，value 允许重复。")])])])]),t._v(" "),a("h3",{attrs:{id:"list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Collection 的子接口，通过索引访问元素，存储一组不唯一、有序的对象")])]),t._v(" "),a("li",[a("p",[t._v("公共方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("E get(int index)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回指定位置元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("E set(int index,E element)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("替换指定位置，返回被取代元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("int indexOf(Object o)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回 o 首次出现序号，不存在返回 -1")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("int lastIndexOf(Object o)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回 o 最后出现序号")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("void add(int index,E element)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("指定位置插入")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean add(E element)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("最后位置插入")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("E remove(int index)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("删除并返回指定位置元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean addAll(Collection<? extends E> c)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("列表最后添加 c 中所有元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean addAll(int index,Collection<? extends E> c)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("指定位置添加 c 中所有元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ListIterator"),a("E",[t._v(" listIterator()")])],1),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回迭代器")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ListIterator"),a("E",[t._v(" listIterator(int index)")])],1),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回指定位置开始的迭代器")])])])])])]),t._v(" "),a("h3",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),a("ol",[a("li",[t._v("Collection 的子接口，不保存重复元素，存储一组唯一、无序的对象")]),t._v(" "),a("li",[t._v("公共方法：继承自 Collection，未声明其他方法，不提供 get 方法获取元素")])]),t._v(" "),a("h2",{attrs:{id:"实现类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现类"}},[t._v("#")]),t._v(" 实现类")]),t._v(" "),a("h3",{attrs:{id:"list派生类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list派生类"}},[t._v("#")]),t._v(" List派生类")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("ArrayList")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("数组列表，自动扩容，增长长度为原来的 50%")])]),t._v(" "),a("li",[a("p",[t._v("基于数组，随机访问、遍历效率高，插入删除效率低")])]),t._v(" "),a("li",[a("p",[t._v("可插入 null")])])])]),t._v(" "),a("li",[a("p",[t._v("LiinkedList")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("链式数据结构")])]),t._v(" "),a("li",[a("p",[t._v("基于双向链表，插入删除效率高，随机访问、查找效率低")])]),t._v(" "),a("li",[a("p",[t._v("可插入 null")])]),t._v(" "),a("li",[a("p",[t._v("常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public void addFirst(E e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("插入开头")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public void addLast(E e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("插入尾部")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public E getFirst()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回第一元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public E getLast()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回最后元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public E removeFirst()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("删除并返回第一元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public E removeLast()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("删除并返回最后元素")])])])])])])])]),t._v(" "),a("h3",{attrs:{id:"map派生类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map派生类"}},[t._v("#")]),t._v(" Map派生类")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("HashMap")]),t._v(" "),a("ul",[a("li",[t._v("查找元素的时间复杂度 O(1)")]),t._v(" "),a("li",[t._v("允许 null 键和 null 值")]),t._v(" "),a("li",[t._v("键必须唯一，值可以重复，无序")]),t._v(" "),a("li",[t._v("上座率：元素个数达到容量与上座率乘积时，容量自动翻倍")])])]),t._v(" "),a("li",[a("p",[t._v("TreeMap")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("基于二叉搜索树，查找元素时间复杂度 O(logn)")])]),t._v(" "),a("li",[a("p",[t._v("实现了 SortedMap 接口")])]),t._v(" "),a("li",[a("p",[t._v("不允许 null 键（空指针异常），允许 null 值")])]),t._v(" "),a("li",[a("p",[t._v("键必须唯一，值可以重复，按键值从大到小排列")])]),t._v(" "),a("li",[a("p",[t._v("常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public K firstKey()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回最低键")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public K lastKey()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回最高键")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public SortedMap<K,V> headMap(K toKey)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回键值小于 toKey 那部分映射")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public SortedMap<K,V> tailMap(K toKey)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回大于等于 toKey 那部分映射")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public K lowerKey(K key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回小于给定键的最大键")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public K floorKey(K key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回小于等于给定键的最大键")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public K higherKey(K key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回大于给定键的最小键")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public K ceilingKey(K key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回大于等于给定键的最小键")])])])])])])])]),t._v(" "),a("h3",{attrs:{id:"set派生类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set派生类"}},[t._v("#")]),t._v(" Set派生类")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("HashSet")]),t._v(" "),a("ul",[a("li",[t._v("内部封装了一个 HashMap，HashSet 作为 map 的 key 而存在，value 则是一个类属性")]),t._v(" "),a("li",[t._v("允许 null 元素")]),t._v(" "),a("li",[t._v("不能添加重复元素，方法添加重复对象时不改变集合返回 false")]),t._v(" "),a("li",[t._v("无序，不按插入顺序，也不按 HashCode 顺序")]),t._v(" "),a("li",[t._v("常用方法")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public boolean add(E e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("添加对象，返回成功与否")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public void clear()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("清空集合")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public boolean contains(Object o)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否包含 o 元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public int size()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回集合容量")])])])])]),t._v(" "),a("li",[a("p",[t._v("TreeSet")]),t._v(" "),a("ul",[a("li",[t._v("基于 TreeMap 的键实现，实现 了SortedSet 接口")]),t._v(" "),a("li",[t._v("不允许插入 null 元素（空指针异常）")]),t._v(" "),a("li",[t._v("按元素从小到大排序")]),t._v(" "),a("li",[t._v("不能添加重复元素")]),t._v(" "),a("li",[t._v("常用方法\n|               方法               |           描述            |\n| :------------------------------: | :-----------------------: |\n|         public K first()         |       返回最低元素        |\n|         public K last()          |       返回最高元素        |\n| public SortedSet"),a("E",[t._v(" headSet(E e) |   返回小于 e 那部分映射   |\n| public SortedSet"),a("E",[t._v(" tailSet(E e) | 返回大于等于 e 那部分映射 |\n|       public E lower(E e)        |    返回小于 e 最大元素    |\n|       public E floor(E e)        | 返回小于等于 e 的最大元素 |\n|       public E higher(E e)       |   返回大于 e 的最小元素   |\n|      public E ceiling(E e)       | 返回大于等于 e 的最小元素 |")])],1)],1)])]),t._v(" "),a("li",[a("p",[t._v("LinkedHashset")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("继承自 HashMap，内部加入链表保存元素顺序")])]),t._v(" "),a("li",[a("p",[t._v("基于元素进入集合的顺序或者被访问的顺序排序")])])])])]),t._v(" "),a("h3",{attrs:{id:"传统类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传统类"}},[t._v("#")]),t._v(" 传统类")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("HashTable")]),t._v(" "),a("ul",[a("li",[t._v("Dictionary 的子类，实现了 Map 接口")]),t._v(" "),a("li",[t._v("不允许 null 键，不允许 null 值")]),t._v(" "),a("li",[t._v("键必须唯一，值可以重复，无序")]),t._v(" "),a("li",[t._v("线程安全，支持同步")])])]),t._v(" "),a("li",[a("p",[t._v("Vector")]),t._v(" "),a("ul",[a("li",[t._v("线程安全，同步访问")]),t._v(" "),a("li",[t._v("继承自 AbstractList")])])]),t._v(" "),a("li",[a("p",[t._v("Properties")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("继承自 HashTable，实现了 Map 接口")])]),t._v(" "),a("li",[a("p",[t._v("表示一个持久的属性集，属性列表中每个键及其对应值都是一个字符串")])]),t._v(" "),a("li",[a("p",[t._v("常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("String getProperty(String key)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回指定键对应属性")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Object setProperty(String key, String value)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("调用 Hashtable 的 put 方法")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("void list(PrintStream streamOut)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("将属性列表输出到指定的输出流")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("void list(PrintWriter streamOut)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("将属性列表输出到指定的输出流")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("void load(InputStream streamIn) throws IOException")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("从输入流中读取属性列表")])])])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//加载 properties 配置文件的两种方法,JDBCUtils 为例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//方法一")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URL")]),t._v(" res "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JDBCUtils")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClassLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResource")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"jdbc.properties"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" path "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npro"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileReader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("URLDecoder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("decode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"utf-8"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//方法二")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// InputStream is = JDBCUtils.class.getClassLoader().getResourceAsStream("jdbc.properties");')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStream")]),t._v(" is "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("JDBCUtils")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResourceAsStream")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/jdbc.properties"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\npro"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("is"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])])]),t._v(" "),a("li",[a("p",[t._v("Stack")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("继承自 Vector ，先进后出")])]),t._v(" "),a("li",[a("p",[t._v("线程安全")])]),t._v(" "),a("li",[a("p",[t._v("常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean empty()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否栈空")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Object peek()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("查看栈顶元素，不删除")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Object pop()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("删除栈顶元素，并返回")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Object push(Object element)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("元素压栈")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("int search(Object element)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回位置，以 1 为基数")])])])])])])]),t._v(" "),a("li",[a("p",[t._v("Dictionary")]),t._v(" "),a("ul",[a("li",[t._v("抽象类，用来存储键/值对，作用和Map类相似")])])]),t._v(" "),a("li",[a("p",[t._v("BitSet")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("位集合， 按需增长的位向量")])]),t._v(" "),a("li",[a("p",[t._v("使用场景：整数，无重复")])]),t._v(" "),a("li",[a("p",[t._v("每一位的值都是一个 boolean 值 ，占用一 bit（不是一字节）")])]),t._v(" "),a("li",[a("p",[t._v("内部基于 long 数组， 所以 BitSet 的大小为 long 类型大小(64位)的整数倍")])]),t._v(" "),a("li",[a("p",[t._v("常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("void set(int index)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("将指定索引处的位设置为 true")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("void set(int index, boolean v)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("将指定索引处的位设置为指定值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("void set(int startIndex, int endIndex)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("将范围内的位设置为 true（左开右闭）")])])])])])]),t._v(" "),a("p",[t._v("| void set(int startIndex, int endIndex, boolean v) | 将范围内的位设置为指定值（左开右闭） |\n|              boolean get(int index)               |         返回指定索引处的位值         |")])])]),t._v(" "),a("h2",{attrs:{id:"算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),a("h3",{attrs:{id:"collections"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collections"}},[t._v("#")]),t._v(" Collections")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Collections.reverse(List l)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("反转")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Collections.shuffle(List l)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("混淆")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Collections.sort(List l）")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("排序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Collections.swap(List l,int index1,int index2)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("替换下标位置元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Collections.rotate(List l,int step)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("向右滚动 ，尾部移动到开头")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Collections.synchronizedList()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("线程安全化")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Collections.fill(List l,Object o)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("填充")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Collections.copy(List m,List n)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("n 中的元素复制到 m 中，并覆盖相应索引的元素")])])])]),t._v(" "),a("h3",{attrs:{id:"迭代器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[t._v("#")]),t._v(" 迭代器")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Collection 定义了 toArray()、iterator()、size()方法，但并非所有实现类都重写了这些方法，Set 不提供 get 方法，不能使用 size() 方式遍历。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Set 遍历方式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" set "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HashSet")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//迭代器遍历")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" it "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//for循环遍历：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" set"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n      "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])])]),t._v(" "),a("li",[a("p",[t._v("Iterator 接口常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public abstract boolean hasNext()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否还有后续元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public abstract E next()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回后续元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public abstract void remove()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("删除当前指向元素")])])])])]),t._v(" "),a("li",[a("p",[t._v("ListIterator 接口常用方法")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public abstract boolean hashPrevious()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否有前驱元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public abstract E previous()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回前驱元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public abstract add(E e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("插入 next() 返回值之前，previoous() 之后")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public abstract set(E e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("替换当前指向元素")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public abstract int nextIndex()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回基于 next() 元素序号")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public abstract int previousIndex()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("返回基于 previous() 元素序号")])])])])])]),t._v(" "),a("h3",{attrs:{id:"比较器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较器"}},[t._v("#")]),t._v(" 比较器")]),t._v(" "),a("ol",[a("li",[t._v("Comparator类：一个类有多个属性，不知道按哪个属性进行排序时，通过 Comparator 类重写 compare(Object o1,Object o2 )指定比较算法，再利用 Collections.sort(List l,Comparator c) 进行排序")]),t._v(" "),a("li",[t._v("Comparable接口：实现接口，重写 compareTO(Object another) 方法，利用 Collections.sort(List l）排序")])]),t._v(" "),a("h3",{attrs:{id:"arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[t._v("#")]),t._v(" Arrays")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("数组复制")]),t._v(" "),a("ol",[a("li",[a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyOfRange")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("U")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" original"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" from"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("original：原数组\tfrom：原数组的起始位置\tto：终点位置（不包括）")])]),t._v(" "),a("li",[a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" original"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" newLength"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("original：原数组\tnewLength：要复制的长度")]),t._v(" "),a("blockquote",[a("p",[t._v("StringBuider 中底层数组的扩容使用了 copyOf()")]),t._v(" "),a("p",[t._v("copyOf() 内部是通过 System.arraycopy() 实现的")])])]),t._v(" "),a("li",[a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("arraycopy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" srcPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" dest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" destPos"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("src：原数组\tsrcPos：原数组起始位置")]),t._v(" "),a("p",[t._v("dest：目标数组\tdestPost：目标数组的起始位置\tlength：复制长度")]),t._v(" "),a("blockquote",[a("p",[t._v("List 中的 remove 方法使用了 arraycopy()")])])])])]),t._v(" "),a("li",[a("p",[t._v("其他方法")])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public static String toString()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("转换为字符串")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public static void sort()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("排序")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public static int binarySearch(Object[] a, Object key )")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("搜索")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public static boolean equals(long[] a, long[] b)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("判断是否相同")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("public static void fill(int[] a, int val))")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("填充")])])])]),t._v(" "),a("h3",{attrs:{id:"hashcode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hashcode"}},[t._v("#")]),t._v(" HashCode")]),t._v(" "),a("blockquote",[a("p",[t._v("哈希集合查找元素为时间复杂度为 O(1) 的原理")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("获得散列值：")]),t._v(" "),a("p",[t._v("通过特定的哈希函数，每个对象都有对应的哈希值、")])]),t._v(" "),a("li",[a("p",[t._v("hashcode对应到内存地址：")]),t._v(" "),a("p",[t._v("可以使用一个数组 array，将要存的数据放在 array[hashcode] 位置上")])]),t._v(" "),a("li",[a("p",[t._v("哈希碰撞")]),t._v(" "),a("p",[t._v("通过哈希方法，两个不同的元素，获得了相同的哈希值")]),t._v(" "),a("p",[t._v("最常用用的解决办法是拉链法，在同一地址上建立链表来存储多个 hashcode 相同的元素")])]),t._v(" "),a("li",[a("p",[t._v("查找")]),t._v(" "),a("p",[t._v("通过哈希值找到地址，若地址上有多个元素，则用 equals 判断存储位置是否相同")]),t._v(" "),a("blockquote",[a("p",[t._v("对于哈希集合来说，如果重写了元素对应的 equals() 方法或 hashcode() 方法中的一个，也必须重写另一个")])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);